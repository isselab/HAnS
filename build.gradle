import org.jetbrains.changelog.Changelog
import org.jetbrains.changelog.ExtensionsKt

def properties(String key) {
    return providers.gradleProperty(key)
}

def environment(String key) {
    return providers.environmentVariable(key)
}

plugins {
    id 'java'
    alias libs.plugins.gradleIntelliJPlugin // Gradle IntelliJ Plugin
    alias libs.plugins.changelog // Gradle Changelog Plugin
}

apply plugin: 'org.jetbrains.changelog'

group = properties('pluginGroup').get()
version = properties('pluginVersion').get()

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    pluginName = properties("pluginName")
    version = properties("platformVersion")
    type = properties("platformType")

    // Plugin Dependencies. Uses `platformPlugins` property from the gradle.properties file.
    plugins = properties('platformPlugins').map { it.split(',').collect { it.trim() }.findAll { !it.isEmpty() } }
}

runIde {
    autoReloadPlugins = true
}

patchPluginXml {
    pluginId = properties('pluginId')
    sinceBuild = properties('pluginSinceBuild')
    untilBuild = properties('pluginUntilBuild')

    // Extract the <!-- Plugin description --> section from README.md and provide for the plugin's manifest
    pluginDescription = providers.fileContents(layout.projectDirectory.file('README.md')).asText.map {
        def start = '<!-- Plugin description -->'
        def end = '<!-- Plugin description end -->'

        def lines = it.lines().toList()
        if (!lines.containsAll([start, end])) {
            throw new GradleException("Plugin description section not found in README.md:\n$start ... $end")
        }

        def desc = lines.subList(lines.indexOf(start) + 1, lines.indexOf(end)).join('\n')
        ExtensionsKt.markdownToHTML(desc, '\n')
    }

    changeNotes = provider {
        changelog.renderItem(
                changelog
                        .getUnreleased()
                        .withHeader(false)
                        .withEmptySections(false)
                        .withLinks(true)
                        .withSummary(true),
                Changelog.OutputType.HTML
        )
    }
}

test {
    useJUnitPlatform()
}

listProductsReleases {
    types =  properties('platformTypes').map { it.split(',').collect { it.trim() }.findAll { !it.isEmpty() } }
}

signPlugin {
    certificateChain = environment("CERTIFICATE_CHAIN")
    privateKey = environment("PRIVATE_KEY")
    password = environment("PRIVATE_KEY_PASSWORD")
}

publishPlugin {
    dependsOn("patchChangelog")
    token = environment("PUBLISH_TOKEN")
}


changelog {
    path = file("CHANGELOG.md").canonicalPath
    repositoryUrl = properties('pluginRepositoryUrl')
    header = "${-> version.get()} - ${ExtensionsKt.date("yyyy-MM-dd")}"
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "Unreleased"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
    lineSeparator = "\n"
    combinePreReleases = true
}

sourceSets.main.java.srcDirs 'src/main/gen'
